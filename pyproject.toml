[build-system]
requires = ["setuptools", "setuptools_scm", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semeio"
authors = [
    { name = "Equinor ASA", email = "fg_sib-scout@equinor.com" },
]
description = "Forward models and workflows for Ert."
requires-python = ">=3.8"
readme = "README.md"
license = { text = "GPL-3.0" }
classifiers = [
    "Environment :: Plugins",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["version"]
dependencies = [
    "resdata",
    "ert>=11.0.0-b0",
    "importlib_metadata",
    "importlib_resources",
    "numpy",
    "pandas>1.3.0",
    "pydantic>=2.9",
    "scikit-learn",
    "scipy",
    "xlrd",
    "pyscal>=0.4.0",
    "fmu-ensemble>1.6.5",
    "segyio",
    "xtgeo>=2.15",
]

[project.urls]
repository = "https://github.com/equinor/semeio"

[project.entry-points."ert"]
semeio_forward_models = "semeio.hook_implementations.forward_models"
CsvExport2Job = "semeio.workflows.csv_export2.csv_export2"
AhmAnalysisJob = "semeio.workflows.ahm_analysis.ahmanalysis"
LocalisationConfigJob = "semeio.workflows.localisation.local_config_script"

[project.entry-points."console_scripts"]
csv_export2 = "semeio.workflows.csv_export2.csv_export2:cli"
overburden_timeshift = "semeio.forward_models.scripts.overburden_timeshift:main_entry_point"
design2params = "semeio.forward_models.scripts.design2params:main_entry_point"
gendata_rft = "semeio.forward_models.scripts.gendata_rft:main_entry_point"
design_kw = "semeio.forward_models.scripts.design_kw:main_entry_point"
fm_pyscal = "semeio.forward_models.scripts.fm_pyscal:main_entry_point"
replace_string = "semeio.forward_models.scripts.replace_string:main_entry_point"

[tool.setuptools_scm]
write_to = "src/semeio/version.py"

[tool.setuptools.packages.find]
where = ["src"]

[project.optional-dependencies]
test = [
    "hypothesis",
    "odfpy",
    "oil_reservoir_synthesizer",
    "openpyxl",
    "pytest",
    "pytest-console-scripts",
    "pytest-snapshot",
    "pytest-xdist",
    "rstcheck-core",
    "xlwt",
]

style = [
    "pre-commit",
]

types = [
    "mypy",
    "pandas-stubs",
    "types-setuptools",
    "types-PyYAML",
]

[tool.pytest.ini_options]
addopts = "-ra --strict-markers"
markers = [
    "ert_integration: Involves running the ert application explicitly",
    "equinor_test: Requires presences of test data in specified location"
]

[tool.ruff]
src = ["src"]
line-length = 88
extend-exclude = ["tests/legacy_test_data"]

[tool.ruff.lint]
select = [
  "W",   # pycodestyle
  "I",   # isort
  "B",   # flake-8-bugbear
  "SIM", # flake-8-simplify
  "F",   # pyflakes
  "C4",  # flake8-comprehensions
  "PL",  # pylint
  "NPY", # numpy specific rules
]
ignore = ["PLW2901", # redefined-loop-name
          "PLR2004", # magic-value-comparison
          "PLR0915", # too-many-statements
          "PLR0912", # too-many-branches
          "PLR0911",  # too-many-return-statements
]

[tool.ruff.lint.pylint]
max-args = 20
